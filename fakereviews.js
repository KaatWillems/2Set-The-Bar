const Profile = require("./models/profile").Profile;
const User = require("./models/user");
const Review = require("./models/review").Review;
const Bar = require("./models/bar").Bar;
const express = require("express");
const mongoose = require("mongoose");
const router = express.Router();
const app = express();
const expressEjsLayout = require("express-ejs-layouts");
const flash = require("connect-flash");
const session = require("express-session");
const passport = require("passport");
const multer = require("multer");
const cloudinary = require("cloudinary");
const { CloudinaryStorage } = require("multer-storage-cloudinary");
const fileupload = require("express-fileupload");
const dotenv = require("dotenv"); //added mongodb
dotenv.config(); //added for mongodb

const randomRating = (yes) => {
  if (yes === true) {
    return Math.round(Math.random() * 9 + 1);
  } else {
    return Math.round(Math.random() * 5 + 1);
  }
};

const makeReview = () => {
  const newReview = new Review({
    rating: randomRating(false),
    crowd: randomRating(true),
    hygiene: randomRating(true),
    atmosphere: randomRating(true),
    safety: randomRating(true),
    comment: "this fake review was automatically generated by Sebastian, the wise",
  });
  return newReview;
};
dotenv.config(); //added for mongodb

const connectToDb = async () => {
  //passport config:
  require("./config/passport")(passport);
  //mongoose (connected with Set the bar)
  mongoose
    .connect(process.env.DB_CONNECT, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    })
    .then(() => console.log("connected with Setthebar DB"))
    .catch((err) => console.log(err));
};

const updateRatings = async (id) => {
  let reviewsDB = await Bar.find({ _id: id }, { reviews: 1 });
  let reviewsIds = reviewsDB[0].reviews;
  let length = reviewsIds.length;
  let rating = 0,
    crowd = 0,
    hygiene = 0,
    atmosphere = 0,
    safety = 0;
  for (const reviewId of Array.from(reviewsIds)) {
    let reviewDB = await Review.find({ _id: reviewId });
    let review = reviewDB[0];
    rating = rating + review.rating;
    crowd = crowd + review.crowd;
    hygiene = hygiene + review.hygiene;
    atmosphere = atmosphere + review.atmosphere;
    safety = safety + review.safety;
  }
  await Bar.findOneAndUpdate(
    { _id: id },
    {
      $set: {
        averages: [
          {
            ratingType: "rating",
            rating: Math.round((rating / length) * 10) / 10,
          },
          {
            ratingType: "crowd",
            rating: Math.round((crowd / length) * 10) / 10,
          },
          {
            ratingType: "hygiene",
            rating: Math.round((hygiene / length) * 10) / 10,
          },
          {
            ratingType: "atmosphere",
            rating: Math.round((atmosphere / length) * 10) / 10,
          },
          {
            ratingType: "safety",
            rating: Math.round((safety / length) * 10) / 10,
          },
        ],
      },
    }
  );
};

const fakeReviews = async () => {
  await connectToDb();
  let bars = await Bar.find();
  let barCounter = 0
  for (const bar of bars) {
      barCounter++;
    let range = Math.round(Math.random() * 10);
    for (let i = 0; i < range; i++) {
      let newReview = makeReview();
      await newReview.save();
      await Bar.findOneAndUpdate(
        { _id: bar._id },
        { $push: { reviews: newReview._id } }
      );
      await updateRatings(bar._id);
    }
    console.log(barCounter)
  }
};

fakeReviews();
